# -*- mode: shell-script; -*-
update_current_git_vars() {
    unset __CURRENT_GIT_BRANCH
    unset __CURRENT_GIT_BRANCH_STATUS
    unset __CURRENT_GIT_BRANCH_IS_DIRTY

    local st="$(git status 2>/dev/null)"
    if [[ -n "$st" ]]; then
        local -a arr
        arr=(${(f)st})

        if [[ $arr[1] =~ 'Not currently on any branch.' ]]; then
            __CURRENT_GIT_BRANCH='no-branch'
        else
            __CURRENT_GIT_BRANCH="${arr[1][(w)4]}";
        fi

        if [[ $arr[2] =~ 'Your branch is' ]]; then
            if [[ $arr[2] =~ 'ahead' ]]; then
                __CURRENT_GIT_BRANCH_STATUS='ahead'
            elif [[ $arr[2] =~ 'diverged' ]]; then
                __CURRENT_GIT_BRANCH_STATUS='diverged'
            else
                __CURRENT_GIT_BRANCH_STATUS='behind'
            fi
        fi

        if [[ ! $st =~ 'nothing to commit' ]]; then
            __CURRENT_GIT_BRANCH_IS_DIRTY='1'
        fi
    fi
}

prompt_git_info() {
    if [ -n "$__CURRENT_GIT_BRANCH" ]; then
        local s="("
        s+="$__CURRENT_GIT_BRANCH"
        case "$__CURRENT_GIT_BRANCH_STATUS" in
            ahead)
                s+="+"
                ;;
            diverged)
                s+="%"
                ;;
            behind)
                s+="-"
                ;;
        esac
        if [ -n "$__CURRENT_GIT_BRANCH_IS_DIRTY" ]; then
            s+="*"
        fi
        s+=")"

        printf " %s" $s
    fi
}

chpwd_update_git_vars() {
    update_current_git_vars
}

preexec_update_git_vars() {
    case "$1" in
        git*)
            __EXECUTED_GIT_COMMAND=1
            ;;
    esac
}

precmd_update_git_vars() {
    if [ -n "$__EXECUTED_GIT_COMMAND" ]; then
        update_current_git_vars
        unset __EXECUTED_GIT_COMMAND
    fi
}

get_retval() {
    RETVAL=$?
}

nonzero_return() {
    [[ $RETVAL -gt 0 ]] && echo -n " [$RETVAL]"
    unset RETVAL
}

collapse_pwd() {
    # https://unix.stackexchange.com/questions/26844/
    echo -n $(sed -e "s|^${HOME}|~|" -e "s:\([^/]\)[^/]*/:\1/:g" <<< ${PWD})
}

path() {
    print -l ${(s.:.)PATH};
}

prompt () {
    setopt PROMPT_SUBST
    autoload -U colors && colors
    user_color='green'; [ $UID -eq 0 ] && user_color='red'
    suffix='â‰»'; [ $TERM = 'linux' ] && suffix='>'
    PS1='%n@%m %{$fg[$user_color]%}$(collapse_pwd)%{$reset_color%}%{$fg[red]%}$(prompt_git_info)$(nonzero_return)%{$reset_color%}%(!.#.${suffix}) '
}

chpwd_functions+=(chpwd_update_git_vars)
preexec_functions+=(preexec_update_git_vars)
precmd_functions+=(get_retval)
precmd_functions+=(precmd_update_git_vars)
precmd_functions+=(prompt)

# Initialize first
update_current_git_vars
